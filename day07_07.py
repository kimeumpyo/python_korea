class 학생:
    
    이름 = ''
    반 = 0
    키 = 0.0

    def __init__(self, name, number, height):
        self.학생정보입력(name, number, height)
        
    # 예를 들어, 이 메서드가 버그가 있어서 수정햐여할 경우            
    def 학생정보보기(self):
        print('이름:',self.이름,'번호:',self.반,'키:',self.키)
             
        
    def 학생정보입력(self, 이름, 번호, 키):
        self.이름 = 이름
        self.반 = 번호
        self.키 = 키
    
# 다른 사람들이 '학생'클래스 사용
# 클래스 업데이트 요청

# 상속 : 사람이 복붙을 하면 사람이 고쳐야하기 때문에, 컴퓨터가 복붙을 해서 컴퓨터가 고치게한다 (클래스 복붙)

# class 학생2:
    
#     이름 = ''
#     반 = 0
#     키 = 0.0

#     def __init__(self, name, number, height):
#         self.학생정보입력(name, number, height)
#         # 생성자
#         # 객체(변수)가 생성될 때 바로 사용되는 함수
        
#     def 학생정보보기(self):
#         print('이름:',self.이름,'번호:',self.반,'키:',self.키)
             
        
#     def 학생정보입력(self, 이름, 번호, 키):
#         self.이름 = 이름
#         self.반 = 번호
#         self.키 = 키
#     def __del__(self):
#         # 소멸자
#         # 객체(변수)가 없어질 때 사용되는 함수
#         print('프로그램 종료')

class 학생2(학생):
    # 학생 클래스의 변수과 메서드를 복붙
    def __del__(self):
        # __del__(self) : 소멸자, 객체가 없어질 때 사용되는 메서드
        print('프로그램 종료')

class 학생3(학생):
    # 학생 클래스가 복붙됨
    def 학생정보보기(self):
        print('==이름:',self.이름,'번호:',self.반,'키:',self.키,'==')
        # 원본 클래스는 '부모 클래스', 복붙받은 클래스는 '자식 클래스'
        # 만약에, 부모와 자식이 메서드명잉 곂치면
        # 자신의 메서드가 우선으로 사용된다

a = 학생2('철수', 2, 190.9)
a.학생정보보기()

del a # 필요부분에 서 마침표시

b = 학생3('짱구', 2, 183.0)
b.학생정보보기()            # 비록'학생'을 복붙했어도 '학생3'의 메서드가 어선적으로 사용됨(이름곂치면)